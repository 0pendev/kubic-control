// Copyright 2019 Thorsten Kukuk
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


syntax = "proto3";

package api;

// The kubeadm definition
service Kubeadm {
  // Creates a new master
  rpc InitMaster (InitRequest) returns (stream StatusReply) {}
  // Add a new worker node to the cluster
  rpc AddNode (AddNodeRequest) returns (stream StatusReply) {}
  rpc RemoveNode (RemoveNodeRequest) returns (stream StatusReply) {}
  rpc RebootNode (RebootNodeRequest) returns (StatusReply) {}
  rpc ListNodes (Empty) returns (ListReply) {}
  rpc DestroyMaster (Empty) returns (stream StatusReply) {}
  // Upgrade cluster to newest version (as of kubeadm on master)
  rpc UpgradeKubernetes (UpgradeRequest) returns (stream StatusReply) {}
  // Fetch kubeconfig
  rpc FetchKubeconfig (Empty) returns (StatusReply) {}
  // Print status of cluster from kubicd view
  rpc GetStatus (Empty) returns (stream StatusReply) {}
}

// Tell success or not
message StatusReply {
  bool success = 1;
  // any kind of message, error, ...
  string message = 2;
}

// Provide List of Nodes
message ListReply {
  bool success = 1;
  // any kind of message, error, ...
  string message = 2;
  repeated string node = 3;
}

// The init request message
message InitRequest {
  string kubernetes_version = 1;
  string pod_networking = 2;
  string adv_addr = 3;
  // the string should the be DNS name of the loadbalancer
  string multi_master = 4;
  // salt node name of the haproxy
  string haproxy = 5;
  // stage of testing
  string stage = 6;
}

// The upgrade request
message UpgradeRequest {
  string kubernetes_version = 1;
}

// The name of a new worker which should be added
message AddNodeRequest {
   string node_names = 1;
   // this can be worker (default), master or haproxy
   string type = 2;
}

// The Nodes which should be remove
message RemoveNodeRequest {
  string node_names = 1;
}

// The Nodes which should be rebooted
message RebootNodeRequest {
  string node_names = 1;
}

message Version {
   string version = 1;
}

message Empty {}

// Certficiate handling
service Certificate {
  rpc CreateCert (CreateCertRequest) returns (CertificateReply) {}
}

message CreateCertRequest {
  string name = 1;
}

message CertificateReply {
  bool success = 1;
  // any kind of message, error, ...
  string message = 2;
  // private and public key of certificate
  string key = 3;
  string crt = 4;
}

// Deploy services/...
service Deploy {
  rpc DeployKustomize (DeployKustomizeRequest) returns (StatusReply) {}
}

message DeployKustomizeRequest {
  string service = 1;
  string argument = 2;
}

// Install Node with yomi
service Yomi {
  rpc PrepareConfig (PrepareConfigRequest) returns  (stream StatusReply) {}
  rpc Install (InstallRequest) returns (stream StatusReply) {}
}

message PrepareConfigRequest {
  string saltnode = 1;
  string type = 2;
  // -1: false, 0: not set, 1: true
  sint32 efi = 3;
  sint32 baremetal = 4;
  string disk = 5;
  string repo = 6;
  string repo_update = 7;
}

message InstallRequest {
  string saltnode = 1;
}
